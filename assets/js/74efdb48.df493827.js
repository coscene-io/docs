"use strict";(self.webpackChunk_coscene_io_docs=self.webpackChunk_coscene_io_docs||[]).push([["7166"],{53107:function(e,n,o){o.r(n),o.d(n,{frontMatter:()=>w,default:()=>N,toc:()=>S,metadata:()=>l,assets:()=>_,contentTitle:()=>B});var l=JSON.parse('{"id":"developers/cocli/cli-auto-complete","title":"Auto-completion","description":"coCLI provides auto-completion functionality for Bash and Zsh, which can save you a lot of typing.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/developers/cocli/98-cli-auto-complete.mdx","sourceDirName":"developers/cocli","slug":"/developers/cocli/auto-complete","permalink":"/docs/developers/cocli/auto-complete","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Qi He","lastUpdatedAt":1755605770000,"sidebarPosition":98,"frontMatter":{"slug":"auto-complete","sidebar_position":98},"sidebar":"tutorialSidebar","previous":{"title":"Examples of Common Batch Operations","permalink":"/docs/developers/cocli/common-batch-tasks"},"next":{"title":"Advanced Features","permalink":"/docs/developers/cocli/advanced-features"}}'),i=o(96773),s=o(68502),t=o(41699),c=o(54461);function r(e){let{children:n,hidden:o,className:l}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,c.Z)("tabItem_NLl7",l),hidden:o,children:n})}var a=o(7892),h=o(63218),d=o(80969),u=o(44632),p=o(99187),m=o(78150);function x(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function f(e){let{value:n,tabValues:o}=e;return o.some(e=>e.value===n)}var b=o(12453);function j(e){let{className:n,block:o,selectedValue:l,selectValue:s,tabValues:t}=e,r=[],{blockElementScrollPositionUntilNextRender:h}=(0,a.o5)(),d=e=>{let n=e.currentTarget,o=t[r.indexOf(n)].value;o!==l&&(h(n),s(o))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let o=r.indexOf(e.currentTarget)+1;n=r[o]??r[0];break}case"ArrowLeft":{let o=r.indexOf(e.currentTarget)-1;n=r[o]??r[r.length-1]}}n?.focus()};return(0,i.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":o},n),children:t.map(e=>{let{value:n,label:o,attributes:s}=e;return(0,i.jsx)("li",{role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,ref:e=>{r.push(e)},onKeyDown:u,onClick:d,...s,className:(0,c.Z)("tabs__item","tabItem_KJ_J",s?.className,{"tabs__item--active":l===n}),children:o??n},n)})})}function g(e){let{lazy:n,children:o,selectedValue:l}=e,s=(Array.isArray(o)?o:[o]).filter(Boolean);if(n){let e=s.find(e=>e.props.value===l);return e?(0,t.cloneElement)(e,{className:(0,c.Z)("margin-top--md",e.props.className)}):null}return(0,i.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==l}))})}function v(e){let n=function(e){let{defaultValue:n,queryString:o=!1,groupId:l}=e,i=function(e){let{values:n,children:o}=e;return(0,t.useMemo)(()=>{let e=n??x(o).map(e=>{let{props:{value:n,label:o,attributes:l,default:i}}=e;return{value:n,label:o,attributes:l,default:i}}),l=(0,p.lx)(e,(e,n)=>e.value===n.value);if(l.length>0)throw Error(`Docusaurus error: Duplicate values "${l.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[n,o])}(e),[s,c]=(0,t.useState)(()=>(function(e){let{defaultValue:n,tabValues:o}=e;if(0===o.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:o}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${o.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}let l=o.find(e=>e.default)??o[0];if(!l)throw Error("Unexpected error: 0 tabValues");return l.value})({defaultValue:n,tabValues:i})),[r,a]=function(e){let{queryString:n=!1,groupId:o}=e,l=(0,h.k6)(),i=function(e){let{queryString:n=!1,groupId:o}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!o)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return o??null}({queryString:n,groupId:o});return[(0,u._X)(i),(0,t.useCallback)(e=>{if(!i)return;let n=new URLSearchParams(l.location.search);n.set(i,e),l.replace({...l.location,search:n.toString()})},[i,l])]}({queryString:o,groupId:l}),[b,j]=function(e){let{groupId:n}=e,o=n?`docusaurus.tab.${n}`:null,[l,i]=(0,m.Nk)(o);return[l,(0,t.useCallback)(e=>{o&&i.set(e)},[o,i])]}({groupId:l}),g=(()=>{let e=r??b;return f({value:e,tabValues:i})?e:null})();return(0,d.Z)(()=>{g&&c(g)},[g]),{selectedValue:s,selectValue:(0,t.useCallback)(e=>{if(!f({value:e,tabValues:i}))throw Error(`Can't select invalid tab value=${e}`);c(e),a(e),j(e)},[a,j,i]),tabValues:i}}(e);return(0,i.jsxs)("div",{className:(0,c.Z)("tabs-container","tabList_LdMq"),children:[(0,i.jsx)(j,{...n,...e}),(0,i.jsx)(g,{...n,...e})]})}function y(e){let n=(0,b.Z)();return(0,i.jsx)(v,{...e,children:x(e.children)},String(n))}let w={slug:"auto-complete",sidebar_position:98},B="Auto-completion",_={},S=[{value:"Upgrading Bash",id:"upgrading-bash",level:4},{value:"Installing bash-completion",id:"installing-bash-completion",level:4},{value:"Enabling cocli auto-completion",id:"enabling-cocli-auto-completion",level:4},{value:"Installing bash-completion",id:"installing-bash-completion-1",level:4},{value:"Enabling cocli auto-completion",id:"enabling-cocli-auto-completion-1",level:4}];function k(e){let n={a:"a",code:"code",h1:"h1",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"auto-completion",children:"Auto-completion"})}),"\n",(0,i.jsx)(n.p,{children:"coCLI provides auto-completion functionality for Bash and Zsh, which can save you a lot of typing."}),"\n",(0,i.jsxs)(y,{children:[(0,i.jsx)(r,{value:"macos",label:"macOS",default:!0,children:(0,i.jsxs)(y,{children:[(0,i.jsxs)(r,{value:"zsh",label:"Zsh",default:!0,children:[(0,i.jsxs)(n.p,{children:["cocli generates Zsh auto-completion script using the ",(0,i.jsx)(n.code,{children:"cocli completion zsh"})," command. Sourcing this auto-completion script in your Shell will enable cocli auto-completion functionality."]}),(0,i.jsxs)(n.p,{children:["To enable this feature in all Shell sessions, add the following content to your ",(0,i.jsx)(n.code,{children:"~/.zshrc"})," file:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"source <(cocli completion zsh)\n"})}),(0,i.jsx)(n.p,{children:"After reloading the Shell, cocli auto-completion will take effect immediately."}),(0,i.jsxs)(n.p,{children:["If you receive an error like ",(0,i.jsx)(n.code,{children:"2: command not found: compdef"}),", add the following content to the beginning of your ",(0,i.jsx)(n.code,{children:"~/.zshrc"})," file:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"autoload -Uz compinit\ncompinit\n"})})]}),(0,i.jsxs)(r,{value:"bash",label:"Bash",children:[(0,i.jsxs)(n.p,{children:["The Bash completion script for cocli can be generated using the ",(0,i.jsx)(n.code,{children:"cocli completion bash"})," command. Sourcing this script in your Shell will enable the completion functionality."]}),(0,i.jsxs)(n.p,{children:["Additionally, the cocli completion script depends on ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/scop/bash-completion",children:"bash-completion"})}),", so you must install it first."]}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Warning:"})}),(0,i.jsxs)(n.p,{children:["There are two versions of bash-completion: v1 and v2. v1 corresponds to Bash 3.2 (which is the default on macOS), while v2 corresponds to Bash 4.1+. cocli's completion script ",(0,i.jsx)(n.strong,{children:"does not work"})," with bash-completion v1 and Bash 3.2. It requires ",(0,i.jsx)(n.strong,{children:"bash-completion v2"})," and ",(0,i.jsx)(n.strong,{children:"Bash 4.1+"}),". Therefore, to use cocli completion on macOS, you must install and use Bash 4.1+. The following instructions assume you're using Bash 4.1+ (that is, Bash 4.1 or later)."]}),(0,i.jsx)(n.h4,{id:"upgrading-bash",children:"Upgrading Bash"}),(0,i.jsx)(n.p,{children:"The following instructions assume you're using Bash 4.1+. You can check your Bash version by running:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"echo $BASH_VERSION\n"})}),(0,i.jsx)(n.p,{children:"If the version is too old, you can install/upgrade using Homebrew:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"brew install bash\n"})}),(0,i.jsx)(n.p,{children:"Reload your Shell and verify that the required version is in effect:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"echo $BASH_VERSION $SHELL\n"})}),(0,i.jsxs)(n.p,{children:["Homebrew typically installs it as ",(0,i.jsx)(n.code,{children:"${brew --prefix}/bin/bash"}),"."]}),(0,i.jsx)(n.h4,{id:"installing-bash-completion",children:"Installing bash-completion"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Note:"})}),(0,i.jsx)(n.p,{children:"As mentioned earlier, these instructions assume you're using Bash 4.1+, which means you need to install bash-completion v2 (unlike Bash 3.2 and bash-completion v1, where cocli completion won't work)."}),(0,i.jsxs)(n.p,{children:["You can test if bash-completion v2 is installed with ",(0,i.jsx)(n.code,{children:"type _init_completion"}),". If not installed, install it using Homebrew:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"brew install bash-completion@2\n"})}),(0,i.jsxs)(n.p,{children:["As shown in the command output, add the following to your ",(0,i.jsx)(n.code,{children:"~/.bash_profile"}),":"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:'brew_etc="$(brew --prefix)/etc" && [[ -r "${brew_etc}/profile.d/bash_completion.sh" ]] && . "${brew_etc}/profile.d/bash_completion.sh"\n'})}),(0,i.jsxs)(n.p,{children:["Reload your Shell and verify bash-completion v2 is properly installed using ",(0,i.jsx)(n.code,{children:"type _init_completion"}),"."]}),(0,i.jsx)(n.h4,{id:"enabling-cocli-auto-completion",children:"Enabling cocli auto-completion"}),(0,i.jsx)(n.p,{children:"You now need to ensure the cocli completion script is sourced in all Shell environments. There are several ways to do this:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Source the completion script in ",(0,i.jsx)(n.code,{children:"~/.bash_profile"}),":"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"echo 'source <(cocli completion bash)' >>~/.bash_profile\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add the completion script to ",(0,i.jsx)(n.code,{children:"/usr/local/etc/bash_completion.d"}),":"]}),"\n"]}),(0,i.jsxs)(n.p,{children:["After reloading the Shell, cocli auto-completion will take effect. To enable Bash completion in the current Shell session, source the ",(0,i.jsx)(n.code,{children:"~/.bashrc"})," file:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"source ~/.bashrc\n"})})]})]})}),(0,i.jsx)(r,{value:"linux",label:"Linux",children:(0,i.jsxs)(y,{children:[(0,i.jsxs)(r,{value:"zsh",label:"Zsh",default:!0,children:[(0,i.jsxs)(n.p,{children:["cocli generates Zsh auto-completion script using the ",(0,i.jsx)(n.code,{children:"cocli completion zsh"})," command. Sourcing this auto-completion script in your Shell will enable cocli auto-completion functionality."]}),(0,i.jsxs)(n.p,{children:["To enable this feature in all Shell sessions, add the following content to your ",(0,i.jsx)(n.code,{children:"~/.zshrc"})," file:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"source <(cocli completion zsh)\n"})}),(0,i.jsx)(n.p,{children:"After reloading the Shell, cocli auto-completion will take effect immediately."}),(0,i.jsxs)(n.p,{children:["If you receive an error like ",(0,i.jsx)(n.code,{children:"2: command not found: compdef"}),", add the following content to the beginning of your ",(0,i.jsx)(n.code,{children:"~/.zshrc"})," file:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"autoload -Uz compinit\ncompinit\n"})})]}),(0,i.jsxs)(r,{value:"bash",label:"Bash",children:[(0,i.jsxs)(n.p,{children:["The Bash completion script for cocli can be generated using ",(0,i.jsx)(n.code,{children:"cocli completion bash"}),". Sourcing the completion script in your Shell will enable cocli auto-completion functionality."]}),(0,i.jsxs)(n.p,{children:["However, the completion script depends on ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/scop/bash-completion",children:"bash-completion"})}),", so you must install it first (you can check if bash-completion is installed using ",(0,i.jsx)(n.code,{children:"type _init_completion"}),")."]}),(0,i.jsx)(n.h4,{id:"installing-bash-completion-1",children:"Installing bash-completion"}),(0,i.jsxs)(n.p,{children:["Many package managers support bash-completion (see ",(0,i.jsx)(n.a,{href:"https://github.com/scop/bash-completion#installation",children:"here"}),"). You can install it using ",(0,i.jsx)(n.code,{children:"apt-get install bash-completion"})," or ",(0,i.jsx)(n.code,{children:"yum install bash-completion"}),", etc."]}),(0,i.jsxs)(n.p,{children:["These commands will create ",(0,i.jsx)(n.code,{children:"/usr/share/bash-completion/bash_completion"}),", which is the main script for bash-completion. Depending on your package manager, you may need to manually source this file in your ",(0,i.jsx)(n.code,{children:"~/.bashrc"}),"."]}),(0,i.jsxs)(n.p,{children:["To see the result, reload your Shell and run ",(0,i.jsx)(n.code,{children:"type _init_completion"}),". If the command succeeds, you're done, otherwise add the following to your ",(0,i.jsx)(n.code,{children:"~/.bashrc"}),":"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"source /usr/share/bash-completion/bash_completion\n"})}),(0,i.jsxs)(n.p,{children:["Reload your Shell and run ",(0,i.jsx)(n.code,{children:"type _init_completion"})," again to verify bash-completion installation."]}),(0,i.jsx)(n.h4,{id:"enabling-cocli-auto-completion-1",children:"Enabling cocli auto-completion"}),(0,i.jsx)(n.p,{children:"You now need to ensure that the cocli completion script is sourced in your Shell session. This can be done in two ways:"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"For current user"}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"echo 'source <(cocli completion bash)' >>~/.bashrc\n"})}),(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"System-wide"}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"cocli completion bash | sudo tee /etc/bash_completion.d/cocli > /dev/null\nsudo chmod a+r /etc/bash_completion.d/cocli\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Note:"})}),(0,i.jsxs)(n.p,{children:["bash-completion sources all completion scripts from the ",(0,i.jsx)(n.code,{children:"/etc/bash_completion.d"})," directory."]}),(0,i.jsxs)(n.p,{children:["Both methods have the same effect. After reloading the Shell, cocli auto-completion will take effect. To enable Bash completion in the current Shell session, source the ",(0,i.jsx)(n.code,{children:"~/.bashrc"})," file:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Bash",children:"source ~/.bashrc\n"})})]})]})})]})]})}function N(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(k,{...e})}):k(e)}},68502:function(e,n,o){o.d(n,{Z:()=>c,a:()=>t});var l=o(41699);let i={},s=l.createContext(i);function t(e){let n=l.useContext(s);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);