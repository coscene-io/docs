"use strict";(self.webpackChunk_coscene_io_docs=self.webpackChunk_coscene_io_docs||[]).push([[8105],{34556:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"viz/message-schemas/enum-line-type","title":"Enum LineType","description":"An enumeration type used to indicate how input points should be interpreted to create lines","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/viz/9-message-schemas/enum-line-type.md","sourceDirName":"viz/9-message-schemas","slug":"/viz/message-schemas/enum-line-type","permalink":"/docs/viz/message-schemas/enum-line-type","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Yujing Zheng","lastUpdatedAt":1747064612000,"frontMatter":{"title":"Enum LineType"},"sidebar":"tutorialSidebar","previous":{"title":"CylinderPrimitive","permalink":"/docs/viz/message-schemas/cylinder-primitive"},"next":{"title":"Enum LogLevel","permalink":"/docs/viz/message-schemas/enum-log-level"}}');var i=n(25105),r=n(73331);const d={title:"Enum LineType"},c="LineType",a={},l=[{value:"Parent Data Structure",id:"parent-data-structure",level:2},{value:"Values",id:"values",level:2}];function o(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"linetype",children:"LineType"})}),"\n",(0,i.jsx)(t.p,{children:"An enumeration type used to indicate how input points should be interpreted to create lines"}),"\n",(0,i.jsx)(t.h2,{id:"parent-data-structure",children:"Parent Data Structure"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"LineType"})," appears in the ",(0,i.jsx)(t.a,{href:"./line-primitive",children:(0,i.jsx)(t.code,{children:"LinePrimitive"})})," data structure."]}),"\n",(0,i.jsx)(t.h2,{id:"values",children:"Values"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Name"}),(0,i.jsx)(t.th,{children:"Value"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"LINE_STRIP"}),(0,i.jsx)(t.td,{children:"0"}),(0,i.jsx)(t.td,{children:"Connected line segments: 0-1, 1-2, ..., (n-1)-n"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"LINE_LOOP"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"Closed polygon: 0-1, 1-2, ..., (n-1)-n, n-0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"LINE_LIST"}),(0,i.jsx)(t.td,{children:"2"}),(0,i.jsx)(t.td,{children:"Independent line segments: 0-1, 2-3, 4-5, ..."})]})]})]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},73331:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>c});var s=n(58101);const i={},r=s.createContext(i);function d(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);