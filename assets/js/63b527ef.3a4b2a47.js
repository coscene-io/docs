"use strict";(self.webpackChunk_coscene_io_docs=self.webpackChunk_coscene_io_docs||[]).push([["2364"],{32231:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>o,default:()=>h,toc:()=>l,metadata:()=>t,assets:()=>c,contentTitle:()=>a});var t=JSON.parse('{"id":"viz/extensions/best-practices/using-message-converters-to-display-3d-markers-in-3d-panel","title":"Using Message Converters to Display 3D Markers in 3D Panel","description":"By writing your own message converter, you can use coScene\'s existing panels to visualize your custom messages, even if these message definitions are not supported by the existing panels.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/viz/8-extensions/3-best-practices/1-using-message-converters-to-display-3d-markers-in-3d-panel.md","sourceDirName":"viz/8-extensions/3-best-practices","slug":"/viz/extensions/best-practices/using-message-converters-to-display-3d-markers-in-3d-panel","permalink":"/docs/viz/extensions/best-practices/using-message-converters-to-display-3d-markers-in-3d-panel","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Qi He","lastUpdatedAt":1755605770000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"\u6700\u4F73\u5B9E\u8DF5","permalink":"/docs/category/extensions/best-practices"},"next":{"title":"Custom Panel","permalink":"/docs/viz/extensions/best-practices/custom-panel"}}'),i=s(96773),r=s(68502);let o={sidebar_position:1},a="Using Message Converters to Display 3D Markers in 3D Panel",c={},l=[{value:"Why Use Message Converters",id:"why-use-message-converters",level:2},{value:"Our Goal",id:"our-goal",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Initialize the Project",id:"initialize-the-project",level:2},{value:"Write the Converter",id:"write-the-converter",level:2},{value:"Test the Plugin",id:"test-the-plugin",level:2},{value:"Share Your Plugin",id:"share-your-plugin",level:2}];function d(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"using-message-converters-to-display-3d-markers-in-3d-panel",children:"Using Message Converters to Display 3D Markers in 3D Panel"})}),"\n",(0,i.jsx)(n.p,{children:"By writing your own message converter, you can use coScene's existing panels to visualize your custom messages, even if these message definitions are not supported by the existing panels."}),"\n",(0,i.jsx)(n.h2,{id:"why-use-message-converters",children:"Why Use Message Converters"}),"\n",(0,i.jsx)(n.p,{children:"While you could build a custom panel every time you want to visualize certain specific data, writing a message converter can save you a lot of time and effort. Message converters transform data into supported formats, allowing existing panels to handle the visualization without having to build another panel from scratch."}),"\n",(0,i.jsx)(n.h2,{id:"our-goal",children:"Our Goal"}),"\n",(0,i.jsxs)(n.p,{children:["We will create a message converter that transforms custom ",(0,i.jsx)(n.code,{children:"my.Marker"})," messages into ",(0,i.jsx)(n.code,{children:"foxglove.SceneUpdate"})," messages, then use the 3D panel to display these markers. You can download the ",(0,i.jsx)(n.a,{href:"https://download.coscene.io/assets/bags/example.mcap",children:"example mcap file"})," for this tutorial."]}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"Before we begin, you should be familiar with or have installed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Basic robotics concepts"}),"\n",(0,i.jsx)(n.li,{children:"Basic usage of coScene visualization features"}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/basic-types.html",children:"Basic JavaScript/TypeScript syntax"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.npmjs.com/",children:"Basic usage of frontend package managers like npm"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://nodejs.org/en/download/",children:"Node.js version 14 or higher installed on your current device"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"initialize-the-project",children:"Initialize the Project"}),"\n",(0,i.jsxs)(n.p,{children:["Create a project using ",(0,i.jsx)(n.a,{href:"https://github.com/coscene-io/create-coscene-extension",children:"create-coscene-extension"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm init coscene-extension@latest mySceneUpdateConverter\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This command will create a ",(0,i.jsx)(n.code,{children:"mySceneUpdateConverter"})," directory containing some template source code."]}),"\n",(0,i.jsx)(n.h2,{id:"write-the-converter",children:"Write the Converter"}),"\n",(0,i.jsxs)(n.p,{children:["src/index.ts is the entry point for the plugin source code. It exports an ",(0,i.jsx)(n.code,{children:"activate"})," function that accepts a single parameter of type ",(0,i.jsx)(n.a,{href:"/docs/viz/extensions/api/entry-point/extension-context",children:(0,i.jsx)(n.code,{children:"ExtensionContext"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["First, let's add the ",(0,i.jsx)(n.code,{children:"@foxglove/schemas"})," package to our project. ",(0,i.jsx)(n.code,{children:"@foxglove/schemas"})," is foxglove's schema definition library, where you can find all foxglove-supported schema definitions:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @foxglove/schemas\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then, open the ",(0,i.jsx)(n.code,{children:"src/index.ts"})," file and import the following packages:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Import coScene's plugin context\nimport { ExtensionContext } from '@coscene/extension';\n// Import foxglove's schema definitions\nimport { CubePrimitive, SceneUpdate } from '@foxglove/schemas';\n// Import foxglove's time type definition\nimport { Time } from '@foxglove/schemas/schemas/typescript/Time';\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And declare our custom ",(0,i.jsx)(n.code,{children:"my.Marker"})," message type:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Declare our custom `my.Marker` message type\ntype DetectedObject = {\n  position: [number, number, number];\n  markerType: 'adult' | 'car' | 'truck';\n  scale: [number, number, number];\n  timestamp: Time;\n  frameId: string;\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To register the message converter, we need to call the ",(0,i.jsx)(n.code,{children:"registerMessageConverter"})," function from ",(0,i.jsx)(n.code,{children:"extensionContext"}),". The ",(0,i.jsx)(n.code,{children:"registerMessageConverter"})," function requires three parameters:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"fromSchemaName: The message type defined in mcap that needs to be converted"}),"\n",(0,i.jsx)(n.li,{children:"toSchemaName: The target message type after conversion"}),"\n",(0,i.jsx)(n.li,{children:"converter: The function that performs the conversion, which accepts the message registered in fromSchemaName. We need to convert the message to the type registered in toSchemaName"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Register the message converter\nexport function activate(extensionContext: ExtensionContext) {\n  extensionContext.registerMessageConverter({\n    fromSchemaName: 'my.Marker',\n    toSchemaName: 'foxglove.SceneUpdate',\n    converter: (inputMessage: DetectedObject): SceneUpdate => {\n      // Conversion logic from my.Marker to foxglove.SceneUpdate\n    },\n  });\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Fill in the converter function to transform ",(0,i.jsx)(n.code,{children:"my.Marker"})," messages into ",(0,i.jsx)(n.code,{children:"foxglove.SceneUpdate"})," messages. We'll display all detected objects as colored cubes:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Blue for adults"}),"\n",(0,i.jsx)(n.li,{children:"Red for cars"}),"\n",(0,i.jsx)(n.li,{children:"Green for trucks"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"converter: (inputMessage: DetectedObject): SceneUpdate => {\n  const { position, scale, markerType, timestamp, frameId } = inputMessage;\n  const colorMap = {\n    adult: { r: 0, g: 0, b: 1, a: 1 },\n    car: { r: 1, g: 0, b: 0, a: 1 },\n    truck: { r: 0, g: 1, b: 0, a: 1 },\n  };\n\n  const cubePrimitive: CubePrimitive = {\n    pose: {\n      position: { x: position[0], y: position[1], z: position[2] },\n      orientation: { x: 0, y: 0, z: 0, w: 1 },\n    },\n    size: { x: scale[0], y: scale[1], z: scale[2] },\n    color: colorMap[markerType],\n  };\n\n  const sceneUpdateMessage = {\n    deletions: [],\n    entities: [\n      {\n        id: 'detectedObjects-entities',\n        timestamp,\n        frame_id: frameId,\n        lifetime: { sec: 10, nsec: 0 },\n        frame_locked: false,\n        metadata: [],\n        arrows: [],\n        cubes: [cubePrimitive],\n        spheres: [],\n        cylinders: [],\n        lines: [],\n        triangles: [],\n        texts: [],\n        models: [],\n      },\n    ],\n  };\n\n  return sceneUpdateMessage;\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"test-the-plugin",children:"Test the Plugin"}),"\n",(0,i.jsx)(n.p,{children:"To build and install the plugin for local testing in coStudio, run the following command in the plugin directory:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run local-install\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In coStudio, open the plugin list on the right side, and you'll now see ",(0,i.jsx)(n.code,{children:"mySceneUpdateConverter"})," in the list of installed plugins:\n",(0,i.jsx)(n.img,{alt:"extensionList",src:s(40211).Z+"",width:"2722",height:"1600"})]}),"\n",(0,i.jsxs)(n.p,{children:["Now, open our example mcap file, and you can open the 3D panel to see all detected objects displayed as colored cubes:\n",(0,i.jsx)(n.img,{alt:"3dPanel",src:s(97850).Z+"",width:"2860",height:"1616"})]}),"\n",(0,i.jsx)(n.h2,{id:"share-your-plugin",children:"Share Your Plugin"}),"\n",(0,i.jsx)(n.p,{children:"To share your plugin with others, you need to package it as a .coe file. To do this, run the following command in the plugin directory:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run package\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You'll find an ",(0,i.jsx)(n.code,{children:"unknown.mySceneUpdateConverter-0.0.0.coe"})," file in the plugin directory. You can distribute this to others, and they can install it in their coStudio by dragging and dropping it."]})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},97850:function(e,n,s){s.d(n,{Z:()=>t});let t=s.p+"assets/images/3dPanel-14afe6f1ba12887a41c34da574b12a1f.png"},40211:function(e,n,s){s.d(n,{Z:()=>t});let t=s.p+"assets/images/extensionList-6faabe9670b94b42867393137fac5a6b.png"},68502:function(e,n,s){s.d(n,{Z:()=>a,a:()=>o});var t=s(41699);let i={},r=t.createContext(i);function o(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);