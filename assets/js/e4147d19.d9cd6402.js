"use strict";(self.webpackChunk_coscene_io_docs=self.webpackChunk_coscene_io_docs||[]).push([["9862"],{76851:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>a,default:()=>u,toc:()=>c,metadata:()=>i,assets:()=>l,contentTitle:()=>r});var i=JSON.parse('{"id":"viz/extensions/introduction","title":"Extensions Introduction","description":"Extend visualization capabilities through custom extensions to better support your team\'s unique workflows. Build custom panels, convert custom messages into visualization-supported schemas, and create aliases for topic names to facilitate visualization.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/viz/8-extensions/1-introduction.md","sourceDirName":"viz/8-extensions","slug":"/viz/extensions/introduction","permalink":"/docs/viz/extensions/introduction","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Qi He","lastUpdatedAt":1755605770000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"\u63D2\u4EF6","permalink":"/docs/category/extensions"},"next":{"title":"Local Development","permalink":"/docs/viz/extensions/local-development"}}'),t=s(96773),o=s(68502);let a={sidebar_position:1},r="Extensions Introduction",l={},c=[{value:"Custom Panels",id:"custom-panels",level:2},{value:"Links and Resources",id:"links-and-resources",level:3},{value:"Message Converters",id:"message-converters",level:2},{value:"Links and Resources",id:"links-and-resources-1",level:3},{value:"Topic Aliases",id:"topic-aliases",level:2},{value:"Writing Extensions",id:"writing-extensions",level:2},{value:"API Reference",id:"api-reference",level:2}];function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"extensions-introduction",children:"Extensions Introduction"})}),"\n",(0,t.jsx)(n.p,{children:"Extend visualization capabilities through custom extensions to better support your team's unique workflows. Build custom panels, convert custom messages into visualization-supported schemas, and create aliases for topic names to facilitate visualization."}),"\n",(0,t.jsx)(n.p,{children:"Once you develop and install extensions, you can enable them in the application settings to display all available and installed extensions."}),"\n",(0,t.jsx)(n.h2,{id:"custom-panels",children:"Custom Panels"}),"\n",(0,t.jsx)(n.p,{children:"While visualization provides a set of built-in panels for robot data visualization and debugging, many users have domain-specific requirements that our out-of-the-box product cannot meet."}),"\n",(0,t.jsx)(n.p,{children:"Custom panel extensions allow you to build complete panels. Custom panels can subscribe to messages on various topics, publish and receive messages, and display message information in a form that best suits your workflow."}),"\n",(0,t.jsx)(n.p,{children:"Custom panels are ideal when your visualization or interaction requirements are customized and not easily addressed through built-in panels."}),"\n",(0,t.jsx)(n.h3,{id:"links-and-resources",children:"Links and Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Guide: Creating Custom Panels"}),"\n",(0,t.jsx)(n.li,{children:"Building Custom Panel Extensions (React)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"message-converters",children:"Message Converters"}),"\n",(0,t.jsx)(n.p,{children:"Message converter extensions allow you to transform messages from one schema to another. By converting messages to schemas supported by visualization, you can inspect them using visualization's built-in visualization features. For example, you can use a message converter to transform custom GPS messages into foxglove.LocationFix messages for visualization in the map panel."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Note: Message converters only run on-demand when panels subscribe to topics."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"links-and-resources-1",children:"Links and Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Guide: Creating Message Converters"}),"\n",(0,t.jsx)(n.li,{children:"Writing Message Converter Extensions (Map Panel)"}),"\n",(0,t.jsx)(n.li,{children:"Writing Message Converter Extensions (3D Panel)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"topic-aliases",children:"Topic Aliases"}),"\n",(0,t.jsx)(n.p,{children:"Topic alias extensions allow you to alias topics from your data source to new topics. Visualization panels can subscribe to both aliased topics and topics from the original data source."}),"\n",(0,t.jsx)(n.h2,{id:"writing-extensions",children:"Writing Extensions"}),"\n",(0,t.jsxs)(n.p,{children:["You can write extensions using JavaScript or TypeScript and package them into ",(0,t.jsx)(n.code,{children:".coe"})," files. You can distribute these files privately within your organization or publicly through our registry (in development) - installing extensions through the registry is only supported in the desktop application. A single extension can contain multiple panels or converters."]}),"\n",(0,t.jsxs)(n.p,{children:["coScene provides a set of starter templates and commands in the ",(0,t.jsx)(n.a,{href:"https://github.com/coscene-io/create-coscene-extension",children:"create-coscene-extension"})," package to simplify extension writing."]}),"\n",(0,t.jsx)(n.p,{children:"Requirements:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Node.js 14+"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"To set up your extension project, navigate to the directory where you want your source code to reside, and run the following command in a terminal window:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"npm init coscene-extension@latest my-extension-name\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will set up the extension directory structure. Your extension entry point is the ",(0,t.jsx)(n.code,{children:"index.ts"})," file."]}),"\n",(0,t.jsxs)(n.p,{children:["The entry point script must export an ExtensionModule \u2014 a function named ",(0,t.jsx)(n.code,{children:"activate"})," that accepts a single ",(0,t.jsx)(n.code,{children:"ExtensionContext"})," parameter."]}),"\n",(0,t.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/viz/extensions/api/entry-point/extension-context",children:"ExtensionContext"})}),"\n",(0,t.jsx)(n.li,{children:"@coscene/coscene-extension"}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},68502:function(e,n,s){s.d(n,{Z:()=>r,a:()=>a});var i=s(41699);let t={},o=i.createContext(t);function a(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);