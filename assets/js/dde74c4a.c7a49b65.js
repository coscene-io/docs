"use strict";(self.webpackChunk_coscene_io_docs=self.webpackChunk_coscene_io_docs||[]).push([["7295"],{52754:function(e,s,t){t.r(s),t.d(s,{frontMatter:()=>i,default:()=>p,toc:()=>h,metadata:()=>o,assets:()=>a,contentTitle:()=>c});var o=JSON.parse('{"id":"viz/message-schemas/introduction","title":"Introduction","description":"coScene typically requires messages to follow specific structures for proper visualization. Using the Foxglove Schema allows you to take full advantage of the platform\'s built-in visualization capabilities.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/viz/9-message-schemas/introduction.md","sourceDirName":"viz/9-message-schemas","slug":"/viz/message-schemas/introduction","permalink":"/docs/viz/message-schemas/introduction","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Qi He","lastUpdatedAt":1755605770000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Introduction"},"sidebar":"tutorialSidebar","previous":{"title":"\u6D88\u606F\u67B6\u6784","permalink":"/docs/viz/message-schemas"},"next":{"title":"Built-in Types","permalink":"/docs/viz/message-schemas/built-in types"}}'),n=t(96773),r=t(68502);let i={sidebar_position:1,title:"Introduction"},c="Introduction",a={},h=[{value:"Supported Formats",id:"supported-formats",level:2},{value:"Protobuf and JSON Schema Types",id:"protobuf-and-json-schema-types",level:2},{value:"JSON Without Schema Type",id:"json-without-schema-type",level:2},{value:"ROS",id:"ros",level:2},{value:"TypeScript",id:"typescript",level:2}];function l(e){let s={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,n.jsxs)(s.p,{children:["coScene typically requires messages to follow specific structures for proper visualization. Using the ",(0,n.jsx)(s.a,{href:"https://github.com/foxglove/foxglove-sdk",children:"Foxglove Schema"})," allows you to take full advantage of the platform's built-in visualization capabilities."]}),"\n",(0,n.jsx)(s.h2,{id:"supported-formats",children:"Supported Formats"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://github.com/foxglove/foxglove-sdk/tree/main/schemas/proto/foxglove",children:"Protobuf"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://github.com/foxglove/foxglove-sdk/tree/main/schemas/jsonschema",children:"JSON Schema"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://github.com/foxglove/foxglove-sdk/tree/main/schemas/ros1",children:"ROS 1"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://github.com/foxglove/foxglove-sdk/tree/main/schemas/ros2",children:"ROS 2"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://github.com/foxglove/foxglove-sdk/tree/main/typescript/schemas/src/types",children:"TypeScript"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://github.com/foxglove/foxglove-sdk/tree/main/schemas/flatbuffer",children:"FlatBuffers"})}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["If you have written custom messages, you can use ",(0,n.jsx)(s.a,{href:"/docs/viz/extensions/guides/create-message-converter",children:"Message Converter"})," extensions to convert them into schemas supported by coScene."]}),"\n",(0,n.jsx)(s.h2,{id:"protobuf-and-json-schema-types",children:"Protobuf and JSON Schema Types"}),"\n",(0,n.jsxs)(s.p,{children:["Copy the required ",(0,n.jsxs)(s.a,{href:"https://github.com/foxglove/foxglove-sdk/tree/main/schemas/proto/foxglove",children:[(0,n.jsx)(s.code,{children:".proto"})," files"]})," or ",(0,n.jsxs)(s.a,{href:"https://github.com/foxglove/foxglove-sdk/tree/main/schemas/jsonschema",children:[(0,n.jsx)(s.code,{children:".json"})," files"]})," directly into your project and publish data through the coScene WebSocket connection or record to ",(0,n.jsx)(s.a,{href:"https://mcap.dev/",children:"MCAP files"}),"."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Note:"})}),"\n",(0,n.jsxs)(s.p,{children:["For Protobuf data, time values of type ",(0,n.jsx)(s.a,{href:"https://protobuf.dev/reference/protobuf/google.protobuf/#timestamp",children:(0,n.jsx)(s.code,{children:"google.protobuf.Timestamp"})})," or ",(0,n.jsx)(s.a,{href:"https://protobuf.dev/reference/protobuf/google.protobuf/#duration",children:(0,n.jsx)(s.code,{children:"google.protobuf.Duration"})})," will be represented with ",(0,n.jsx)(s.code,{children:"sec"})," and ",(0,n.jsx)(s.code,{children:"nsec"})," fields instead of ",(0,n.jsx)(s.code,{children:"seconds"})," and ",(0,n.jsx)(s.code,{children:"nanos"})," in ",(0,n.jsx)(s.a,{href:"/",children:"User Scripts"}),", ",(0,n.jsx)(s.a,{href:"/",children:"Message Converters"}),", and other parts of coScene to maintain consistency with time and duration types in other data formats."]}),"\n",(0,n.jsxs)(s.p,{children:["You can also import JSON schemas through the ",(0,n.jsxs)(s.a,{href:"https://www.npmjs.com/package/@foxglove/schemas",children:[(0,n.jsx)(s.code,{children:"@foxglove/schemas"})," npm package"]}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"import { CompressedImage } from '@foxglove/schemas/jsonschema';\n"})}),"\n",(0,n.jsxs)(s.p,{children:["We provide WebSocket libraries for real-time data (",(0,n.jsx)(s.a,{href:"https://github.com/foxglove/ws-protocol/tree/main/python",children:"Python"}),", ",(0,n.jsx)(s.a,{href:"https://github.com/foxglove/ws-protocol/tree/main/typescript/ws-protocol-examples",children:"JavaScript"}),", ",(0,n.jsx)(s.a,{href:"https://github.com/foxglove/ws-protocol/tree/main/cpp",children:"C++"}),"), as well as MCAP writers for pre-recorded data files (",(0,n.jsx)(s.a,{href:"https://github.com/foxglove/mcap/tree/main/python",children:"Python"}),", ",(0,n.jsx)(s.a,{href:"https://github.com/foxglove/mcap/tree/main/typescript",children:"JavaScript"}),", ",(0,n.jsx)(s.a,{href:"https://github.com/foxglove/mcap/tree/main/cpp",children:"C++"}),")."]}),"\n",(0,n.jsxs)(s.p,{children:["See the example blog post about recording your Protobuf data using the MCAP C++ writer: ",(0,n.jsx)(s.a,{href:"https://foxglove.dev/blog/recording-robocar-data-with-mcap",children:"Recording Robocar Data with MCAP"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"json-without-schema-type",children:"JSON Without Schema Type"}),"\n",(0,n.jsxs)(s.p,{children:["MCAP supports writing JSON messages without specifying a schema type. To write JSON message data without a schema type, set the channel's message encoding to ",(0,n.jsx)(s.code,{children:"json"})," and the schema type ID to 0. This indicates that the channel has no schema type. For details, see: ",(0,n.jsx)(s.a,{href:"https://mcap.dev/spec#channel-op0x04",children:"https://mcap.dev/spec#channel-op0x04"})]}),"\n",(0,n.jsx)(s.h2,{id:"ros",children:"ROS"}),"\n",(0,n.jsxs)(s.p,{children:["Install the ",(0,n.jsx)(s.code,{children:"foxglove_msgs"})," package:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sudo apt install ros-noetic-foxglove-msgs # For ROS 1\nsudo apt install ros-galactic-foxglove-msgs # For ROS 2\n"})}),"\n",(0,n.jsx)(s.p,{children:"Then, import the required schemas in your ROS project to start publishing data:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"from foxglove_msgs.msg import Vector2\n\nmsg = Vector2()\nmsg.x = 0.5\nmsg.y = 0.7\n"})}),"\n",(0,n.jsx)(s.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,n.jsx)(s.p,{children:"Import coScene message schemas as TypeScript types for type checking."}),"\n",(0,n.jsxs)(s.p,{children:["In coScene's ",(0,n.jsx)(s.a,{href:"/",children:"User Script Panel"}),", you can specify the required schema type using ",(0,n.jsx)(s.code,{children:'Message<"foxglove.[SchemaName]">'}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"import { Input, Message } from './types';\n\ntype Output = Message<'foxglove.Point2'>;\n\nexport const inputs = ['/input/topic'];\nexport const output = '/studio_script/output_topic';\n\nexport default function script(event: Input<'/input/topic'>): Output {\n  return { x: 1, y: 2 };\n}\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For your own TypeScript projects, you can import types directly from the ",(0,n.jsx)(s.a,{href:"https://www.npmjs.com/package/@foxglove/schemas",children:"@foxglove/schemas"})," npm package:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"import { Point2 } from '@foxglove/schemas';\nconst myPoint: Point2 = { x: 1, y: 2 };\n"})}),"\n",(0,n.jsx)(s.p,{children:"Import these types when working with JavaScript WebSocket or MCAP projects, or when writing custom data transformation scripts in coScene's User Script Panel."})]})}function p(e={}){let{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},68502:function(e,s,t){t.d(s,{Z:()=>c,a:()=>i});var o=t(41699);let n={},r=o.createContext(n);function i(e){let s=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(r.Provider,{value:s},e.children)}}}]);