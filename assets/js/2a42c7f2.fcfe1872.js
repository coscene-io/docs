"use strict";(self.webpackChunk_coscene_io_docs=self.webpackChunk_coscene_io_docs||[]).push([["7919"],{38507:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>r,default:()=>p,toc:()=>d,metadata:()=>s,assets:()=>o,contentTitle:()=>l});var s=JSON.parse('{"id":"viz/extensions/api/custom-panels/settings-tree","title":"SettingsTree","description":"SettingsTree is a data structure used to define panel settings.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/viz/8-extensions/5-api/3-custom-panels/6-settings-tree.md","sourceDirName":"viz/8-extensions/5-api/3-custom-panels","slug":"/viz/extensions/api/custom-panels/settings-tree","permalink":"/docs/viz/extensions/api/custom-panels/settings-tree","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Qi He","lastUpdatedAt":1755605770000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"SettingsIcon","permalink":"/docs/viz/extensions/api/custom-panels/settings-icon"},"next":{"title":"SettingsTreeAction","permalink":"/docs/viz/extensions/api/custom-panels/settings-tree-action"}}'),i=t(96773),a=t(68502);let r={sidebar_position:6},l="SettingsTree",o={},d=[{value:"Properties",id:"properties",level:2},{value:"actionHandler",id:"actionhandler",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"nodes",id:"nodes",level:3},{value:"Example",id:"example",level:2}];function c(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"settingstree",children:"SettingsTree"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"type SettingsTree = {\n  actionHandler: (action: SettingsTreeAction) => void;\n  nodes: Record<string, SettingsTreeNode>;\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"SettingsTree is a data structure used to define panel settings."}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(n.h3,{id:"actionhandler",children:"actionHandler"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"actionHandler: (action: SettingsTreeAction) => void;\n"})}),"\n",(0,i.jsx)(n.p,{children:"The action handler is called when a user interacts with a settings field, such as changing a value or clicking a button."}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Type"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"action"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/docs/viz/extensions/api/custom-panels/settings-tree-action",children:"SettingsTreeAction"})})]})})]}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"void"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"nodes",children:"nodes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"nodes: Record<string, SettingsTreeNode>;\n"})}),"\n",(0,i.jsx)(n.p,{children:"A map of settings tree node IDs to nodes. Each node represents a group of related settings."}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const settingsTree: SettingsTree = {\n  nodes: {\n    general: {\n      label: 'General',\n      fields: {\n        displayMode: {\n          label: 'Display Mode',\n          input: 'select',\n          options: [\n            { label: 'Auto', value: 'auto' },\n            { label: 'Light', value: 'light' },\n            { label: 'Dark', value: 'dark' },\n          ],\n          value: 'auto',\n        },\n        showLabels: {\n          label: 'Show Labels',\n          input: 'boolean',\n          value: true,\n        },\n      },\n    },\n    advanced: {\n      label: 'Advanced',\n      fields: {\n        maxPoints: {\n          label: 'Maximum Points',\n          input: 'number',\n          value: 100,\n          min: 1,\n          max: 1000,\n          step: 1,\n        },\n      },\n    },\n  },\n  actionHandler: (action) => {\n    // Handle settings changes\n    if (action.action === 'update') {\n      // Update panel state based on the changed settings\n      const { path, value } = action.payload;\n      console.log(`Setting ${path.join('.')} changed to ${value}`);\n    }\n  },\n};\n"})})]})}function p(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},68502:function(e,n,t){t.d(n,{Z:()=>l,a:()=>r});var s=t(41699);let i={},a=s.createContext(i);function r(e){let n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);