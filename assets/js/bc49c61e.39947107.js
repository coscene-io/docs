"use strict";(self.webpackChunk_coscene_io_docs=self.webpackChunk_coscene_io_docs||[]).push([["8221"],{51592:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>r,default:()=>h,toc:()=>d,metadata:()=>t,assets:()=>a,contentTitle:()=>c});var t=JSON.parse('{"id":"viz/extensions/guides/create-message-converter","title":"Create a Message Converter","description":"Build a simple message converter to transform custom GPS messages into messages conforming to the foxglove.LocationFix schema, so they can be visualized in the map panel of the visualization.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/viz/8-extensions/4-guides/2-create-message-converter.md","sourceDirName":"viz/8-extensions/4-guides","slug":"/viz/extensions/guides/create-message-converter","permalink":"/docs/viz/extensions/guides/create-message-converter","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Qi He","lastUpdatedAt":1755605770000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Create a Custom Panel","permalink":"/docs/viz/extensions/guides/create-custom-panel"},"next":{"title":"Optimize Extension Performance","permalink":"/docs/viz/extensions/guides/optimize-extension-performance"}}'),o=s(96773),i=s(68502);let r={sidebar_position:2},c="Create a Message Converter",a={},d=[{value:"Setup",id:"setup",level:2},{value:"Registering the Converter",id:"registering-the-converter",level:2},{value:"Writing the Converter",id:"writing-the-converter",level:2},{value:"Testing",id:"testing",level:2}];function l(e){let n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"create-a-message-converter",children:"Create a Message Converter"})}),"\n",(0,o.jsxs)(n.p,{children:["Build a simple message converter to transform custom GPS messages into messages conforming to the ",(0,o.jsx)(n.code,{children:"foxglove.LocationFix"})," schema, so they can be visualized in the map panel of the visualization."]}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(n.p,{children:["In your terminal window, ",(0,o.jsx)(n.code,{children:"cd"})," to the directory where your source code resides, then run the following command:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm init coscene-extension@latest myExtensionName\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This will use create-coscene-extension to create a ",(0,o.jsx)(n.code,{children:"myExtensionName"})," directory containing the source code for a sample message converter."]}),"\n",(0,o.jsx)(n.h2,{id:"registering-the-converter",children:"Registering the Converter"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"index.ts"})," file in your project's ",(0,o.jsx)(n.code,{children:"src"})," folder is the entry point for your extension source code. It must export an ",(0,o.jsx)(n.code,{children:"activate"})," function that accepts an ",(0,o.jsx)(n.code,{children:"extensionContext"})," parameter of type ExtensionContext."]}),"\n",(0,o.jsxs)(n.p,{children:["To register a message converter, call ",(0,o.jsx)(n.code,{children:"registerMessageConverter"})," on the ",(0,o.jsx)(n.code,{children:"extensionContext"})," parameter, passing three arguments: the source schema type, the target schema type, and the actual ",(0,o.jsx)(n.code,{children:"converter"})," function."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'import { MessageEvent } from "@coscene/extension";\n\nexport function activate(extensionContext: ExtensionContext) {\n  extensionContext.registerMessageConverter({\n    fromSchemaName: "...",\n    toSchemaName: "...",\n    converter: (inputMessage: MyInputType, messageEvent: MessageEvent<MyInputType>) => {\n      // ...\n    },\n  });\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"converter"})," function accepts two arguments \u2013 the input topic message and the full message event. The message event can be used to access other relevant information, such as the message's ",(0,o.jsx)(n.code,{children:"publishTime"}),", ",(0,o.jsx)(n.code,{children:"receiveTime"}),", and ",(0,o.jsx)(n.code,{children:"topic"})," name."]}),"\n",(0,o.jsx)(n.h2,{id:"writing-the-converter",children:"Writing the Converter"}),"\n",(0,o.jsxs)(n.p,{children:["Suppose our data contains GPS messages of type ",(0,o.jsx)(n.code,{children:"sensors.MyGps"}),", which include ",(0,o.jsx)(n.code,{children:"lat"})," and ",(0,o.jsx)(n.code,{children:"lon"})," fields."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"type MyGps = {\n  lat: number;\n  lon: number;\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To visualize GPS coordinates, the map panel requires messages in the foxglove.LocationFix format. In short, our converter needs to transform ",(0,o.jsx)(n.code,{children:"MyGps"})," messages into messages conforming to the ",(0,o.jsx)(n.code,{children:"foxglove.LocationFix"})," schema."]}),"\n",(0,o.jsxs)(n.p,{children:["First, specify the ",(0,o.jsx)(n.em,{children:"from"})," schema (",(0,o.jsx)(n.code,{children:"sensors.MyGps"}),") and the ",(0,o.jsx)(n.em,{children:"to"})," schema (",(0,o.jsx)(n.code,{children:"foxglove.LocationFix"}),") to inform the visualization that the converter we register will convert ",(0,o.jsx)(n.code,{children:"sensors.MyGps"})," messages into ",(0,o.jsx)(n.code,{children:"foxglove.LocationFix"})," messages."]}),"\n",(0,o.jsxs)(n.p,{children:["Then, write the ",(0,o.jsx)(n.code,{children:"converter"})," function. In our example, we remap the ",(0,o.jsx)(n.code,{children:"lat"})," and ",(0,o.jsx)(n.code,{children:"lon"})," fields to the ",(0,o.jsx)(n.code,{children:"latitude"})," and ",(0,o.jsx)(n.code,{children:"longitude"})," fields expected by the ",(0,o.jsx)(n.code,{children:"foxglove.LocationFix"})," schema:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'export function activate(extensionContext: ExtensionContext) {\n  extensionContext.registerMessageConverter({\n    fromSchemaName: "sensors.MyGps",\n    toSchemaName: "foxglove.LocationFix",\n    converter: (myGps: MyGps, messageEvent: MessageEvent<MyGps>) => {\n      return {\n        latitude: myGps.lat,\n        longitude: myGps.lon,\n      };\n    },\n  });\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,o.jsxs)(n.p,{children:["Once you have packaged and installed the extension, load any data source containing ",(0,o.jsx)(n.code,{children:"sensors.MyGps"})," messages in the visualization, and visualize them in the map panel or raw message panel by clicking the schema dropdown and selecting the output schema you returned as ",(0,o.jsx)(n.code,{children:"toSchema"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Note"}),"\n",(0,o.jsx)(n.p,{children:"Message converters only run on-demand when panels subscribe to topics."})]})}function h(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},68502:function(e,n,s){s.d(n,{Z:()=>c,a:()=>r});var t=s(41699);let o={},i=t.createContext(o);function r(e){let n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);